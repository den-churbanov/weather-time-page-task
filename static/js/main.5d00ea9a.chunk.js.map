{"version":3,"sources":["weather-slider/WeatherSlider.tsx","components/svg-icons/Icon.tsx","components/svg-icons/social-icons-sprite.svg","components/Header.tsx","pages/WrapperPage.tsx","pages/HomePage.tsx","pages/TimePage.tsx","hooks/http.hook.ts","components/Alert.tsx","weather-slider/WeatherContext.tsx","hooks/yandex.geo.hook.ts","weather-slider/styles/weather-icons-sprite.svg","weather-slider/weather-conditions.ts","weather-slider/SliderCard.tsx","components/Loader.tsx","components/CurrentLocationBlock.tsx","components/CurrentWeatherBlock.tsx","pages/WeatherPage.tsx","App.tsx","index.tsx"],"names":["Direction","Icon","name","className","file","xlinkHref","Header","useState","mobileActive","setMobileActive","links","CLink","href","iName","hideMenu","e","stopPropagation","to","onClick","map","link","idx","target","rel","IconsSVG","preventDefault","prevState","WrapperPage","children","Fragment","HomePage","hours","Date","getHours","getHelloMessage","Math","round","random","TimePage","getCurrentTime","useCallback","date","h","parseTimePart","m","getMinutes","s","getSeconds","time","setTime","part","toString","length","useEffect","id","setInterval","clearInterval","useHttp","loading","setLoading","undefined","error","setError","status","setStatus","request","url","a","method","body","headers","JSON","stringify","fetch","response","ok","Error","get","URL","blob","data","createObjectURL","json","message","console","log","clearError","Alert","show","hideHandler","header","ReactDOM","createPortal","CSSTransition","in","timeout","classNames","unmountOnExit","document","getElementById","WeatherContext","React","createContext","windDirection","degrees","useWeather","useContext","WeatherProvider","forecast","setForecast","YANDEX_API_KEY","members","setMembers","active","setActive","getMemberInfoFromData","member","GeoObject","description","text","metaDataProperty","GeocoderMetaData","coords","getFeatureMemberCoords","Point","pos","split","coord","parseFloat","toFixed","latitude","longitude","getMemberByCoords","long","lat","GeoObjectCollection","featureMember","info","getMembersByCityName","city","resetMembers","locationLoad","useYandexGeoAPI","errMsg","setErrMsg","showErr","setShowErr","fetchForecast","getForecastByCityCoords","getForecastByGeolocation","navigator","geolocation","getCurrentPosition","position","setActiveGeolocation","parseInt","currentTarget","resetCurrentWeather","Provider","value","toDate","timestamp","withDay","withTime","shortMonths","getDay","getDate","getMonth","isLoading","parse","getIconByID","current","offset","conditions","icon","weather","now","sunrise","sunset","SliderCard","item","style","temp","timezone_offset","dt","day","night","wind_deg","wind_speed","Loader","viewBox","cx","cy","r","WeatherSlider","breakpoints","wrapper","useRef","slidesToScroll","wrapperWidth","sliderState","setSliderState","touchStart","setTouchStart","right","direction","setDirection","clientWidth","slidesToShow","useMemo","point","itemWidth","scrollX","styles","trackStyle","transform","itemStyle","minWidth","margin","daily","ref","onTouchStart","touches","clientX","onTouchMove","dx","left","abs","onTouchEnd","getCurrentLocationTimeString","timezone","toLocaleTimeString","timeZone","hour","minute","second","CurrentLocationBlock","currentLocationTime","input","timer","items","SwitchTransition","addEndListener","node","done","addEventListener","type","placeholder","autoComplete","required","htmlFor","trim","CurrentWeatherBlock","InfoState","basic","setBasic","getTimeByTimeZone","toLocaleString","feels","feels_like","external","pressure","humidity","uvi","WeatherPage","App","process","basename","exact","path","component","render"],"mappings":"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","file":"static/js/main.5d00ea9a.chunk.js","sourcesContent":["import React, {useEffect, useMemo, useRef, useState} from 'react'\r\nimport {useWeather} from './WeatherContext'\r\nimport {SliderCard} from './SliderCard'\r\nimport {Icon} from '../components/svg-icons/Icon'\r\nimport IconsSVG from './styles/weather-icons-sprite.svg'\r\nimport {Loader} from \"../components/Loader\";\r\n\r\nenum Direction {\r\n    left,\r\n    right\r\n}\r\n\r\ninterface ISliderParams {\r\n    breakpoints: Array<{\r\n        point: number,\r\n        slidesToShow: number\r\n    }>\r\n}\r\n\r\nexport const WeatherSlider: React.FC<ISliderParams> = ({breakpoints}) => {\r\n    const ITEM_MAR = 10\r\n    const wrapper = useRef<HTMLDivElement>(null)\r\n\r\n    const [sliderState, setSliderState] = useState({\r\n        position: 0,\r\n        slidesToScroll: 1,\r\n        wrapperWidth: 1280\r\n    })\r\n    const [touchStart, setTouchStart] = useState(0)\r\n    const [direction, setDirection] = useState<Direction>(Direction.right)\r\n\r\n    const {current} = wrapper\r\n    const wrapperWidth = current?.clientWidth\r\n\r\n    const slidesToShow = useMemo(() => {\r\n        for (const {slidesToShow, point} of breakpoints) {\r\n            if (wrapperWidth! < point) return slidesToShow\r\n        }\r\n        return 5\r\n    }, [wrapperWidth])\r\n\r\n    const itemWidth = useMemo(() => {\r\n        return (wrapperWidth! - (slidesToShow * 2 - 2) * ITEM_MAR) / slidesToShow\r\n    }, [wrapperWidth, slidesToShow])\r\n\r\n    const scrollX = itemWidth + 2 * ITEM_MAR\r\n\r\n    useEffect(() => {\r\n        setSliderState(prevState => ({\r\n            ...prevState,\r\n            wrapperWidth: wrapperWidth!,\r\n            position: -scrollX\r\n        }))\r\n    }, [wrapperWidth])\r\n\r\n    const {forecast, isLoading} = useWeather()\r\n\r\n    const styles = {\r\n        trackStyle: {\r\n            transform: `translateX(${sliderState.position}px)`,\r\n        },\r\n        itemStyle: {\r\n            minWidth: `${itemWidth}px`,\r\n            margin: `0 ${ITEM_MAR}px`\r\n        }\r\n    }\r\n    const weather = forecast?.daily\r\n\r\n    //handlers\r\n    const prevBtnHandler = (e: React.MouseEvent) => {\r\n        if (Math.round(sliderState.position) === 0) return\r\n        setSliderState(prevState =>\r\n            ({\r\n                ...prevState,\r\n                position: prevState.position + prevState.slidesToScroll * scrollX,\r\n            })\r\n        )\r\n    }\r\n    const nextBtnHandler = (e: React.MouseEvent) => {\r\n        if (Math.abs(sliderState.position) / scrollX === weather!.length - slidesToShow) return\r\n        setSliderState(prevState =>\r\n            ({\r\n                ...prevState,\r\n                position: prevState.position - prevState.slidesToScroll * scrollX,\r\n            })\r\n        )\r\n    }\r\n    const onTouchStartHandler = (e: React.TouchEvent) => {\r\n        setTouchStart(e.touches[0].clientX)\r\n    }\r\n    const onTouchMoveHandler = (e: React.TouchEvent) => {\r\n        const dx = e.touches[0].clientX - touchStart\r\n        dx < 0 ? setDirection(Direction.right) : setDirection(Direction.left)\r\n        if (sliderState.position + dx > 10 ||\r\n            Math.abs(sliderState.position + dx) > (weather!.length - slidesToShow) * scrollX + 10) return\r\n        setTouchStart(e.touches[0].clientX)\r\n        setSliderState(prevState => (\r\n            {\r\n                ...prevState,\r\n                position: prevState.position + dx\r\n            }\r\n        ))\r\n    }\r\n    const onTouchEndHandler = (e: React.TouchEvent) => {\r\n        const dx = sliderState.position % scrollX\r\n        switch (direction) {\r\n            case Direction.left:\r\n                setSliderState(prevState => (\r\n                    {\r\n                        ...prevState,\r\n                        position: prevState.position - dx\r\n                    }\r\n                ))\r\n                break\r\n            case Direction.right:\r\n                if (Math.abs(dx) < itemWidth / 2) {\r\n                    setSliderState(prevState => (\r\n                        {\r\n                            ...prevState,\r\n                            position: prevState.position - dx\r\n                        }\r\n                    ))\r\n                } else {\r\n                    setSliderState(prevState => (\r\n                        {\r\n                            ...prevState,\r\n                            position: prevState.position + (Math.abs(dx) - scrollX)\r\n                        }\r\n                    ))\r\n\r\n                }\r\n        }\r\n        setTouchStart(0)\r\n    }\r\n\r\n    return (\r\n        <div className=\"wrapper\" ref={wrapper}>\r\n            {isLoading && !weather ? <Loader/> :\r\n                <>\r\n                    {weather &&\r\n                    <div className=\"slider-button prev\" onClick={prevBtnHandler}>\r\n                        <Icon name=\"slider-arrow\" file={IconsSVG}/>\r\n                    </div>}\r\n                    <div className=\"slider-container\">\r\n                        <div className=\"slider-track\" style={styles.trackStyle}\r\n                             onTouchStart={onTouchStartHandler}\r\n                             onTouchMove={onTouchMoveHandler}\r\n                             onTouchEnd={onTouchEndHandler}>\r\n                            {weather && weather.map((item, idx) => {\r\n                                return <SliderCard key={idx} item={item} style={styles.itemStyle}/>\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                    {weather &&\r\n                    <div className=\"slider-button next\" onClick={nextBtnHandler}>\r\n                        <Icon name=\"slider-arrow\" file={IconsSVG}/>\r\n                    </div>}\r\n                </>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\ninterface IIconParams{\r\n    name: string,\r\n    className?: string,\r\n    file: string\r\n}\r\n\r\nexport const Icon = ({name, className, file}: IIconParams) => {\r\n    return (\r\n        <svg className={`${className ? className : ''}`}>\r\n            <use xlinkHref={`${file}#${name}-icon`}/>\r\n        </svg>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/social-icons-sprite.8f9e79c9.svg\";","import React, {useState} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport {Icon} from './svg-icons/Icon'\r\nimport IconsSVG from './svg-icons/social-icons-sprite.svg'\r\n\r\n/**\r\n * for support svg import put into ./src/@types/assets/index.d.ts next declaration:\r\n declare module \"\\*.svg\" {\r\n      import React = require(\"react\");\r\n      export const ReactComponent: React.SFC<React.SVGProps<SVGSVGElement>>;\r\n      const src: string;\r\n      export default src;\r\n * more: https://duncanleung.com/typescript-module-declearation-svg-img-assets/\r\n}**/\r\n\r\ndeclare global {\r\n    namespace JSX {\r\n        interface IntrinsicElements {\r\n            Navigation: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\r\n        }\r\n    }\r\n}\r\ntype SocialLink = {\r\n    href: string,\r\n    className: string,\r\n    iName: string\r\n}\r\n\r\nexport const Header: React.FC = () => {\r\n    const [mobileActive, setMobileActive] = useState(false)\r\n\r\n    const links: Array<SocialLink> =\r\n        [CLink('tel:+79278988843', 'phone-icon', 'phone'),\r\n            CLink('mailto:churbanov.dv@gmail.com', 'gmail-icon', 'gmail'),\r\n            CLink('https://t.me/den_churbanov', 'tg-icon', 'tg'),\r\n            CLink('https://vk.com/den_churbanov', 'vk-icon', 'vk'),\r\n            CLink('https://instagram.com/den_churbanov', 'ig-icon', 'ig')]\r\n\r\n    function CLink(href: string, className: string, iName: string) {\r\n        return {\r\n            href,\r\n            className,\r\n            iName\r\n        }\r\n    }\r\n\r\n    const toggleMenu = (e: React.MouseEvent) => {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n        setMobileActive(prevState => !prevState)\r\n    }\r\n\r\n    const hideMenu = (e: React.MouseEvent) => {\r\n        e.stopPropagation()\r\n        if (mobileActive) setMobileActive(false)\r\n    }\r\n\r\n    return (\r\n        <header className=\"header\">\r\n            <div className=\"header-body\">\r\n                <nav className={`site-header-list ${mobileActive ? 'active ' : ''}`}>\r\n                    <div className=\"nav_item\">\r\n                        <Link to=\"/\" className=\"nav_link\" onClick={hideMenu}>На главную</Link>\r\n                    </div>\r\n                    <div className=\"nav_item\">\r\n                        <Link to=\"/time\" className=\"nav_link\" onClick={hideMenu}>Время</Link>\r\n                    </div>\r\n                    <div className=\"nav_item\">\r\n                        <Link to=\"/weather\" className=\"nav_link\" onClick={hideMenu}>Погода</Link>\r\n                    </div>\r\n                    <div className=\"social__column\">\r\n                        <span>Свяжитесь со мной:</span>\r\n                        <ul className=\"social-menu\">\r\n                            {links.map((link, idx) => {\r\n                                return (\r\n                                    <li key={idx}>\r\n                                        <a href={link.href}\r\n                                           className={link.className}\r\n                                           target=\"_blank\"\r\n                                           rel=\"noopener noreferrer\">\r\n                                            <Icon name={link.iName}\r\n                                                  className=\"social-icon\"\r\n                                                  file={IconsSVG}/>\r\n                                        </a>\r\n                                    </li>\r\n                                )\r\n                            })}\r\n                        </ul>\r\n                    </div>\r\n                </nav>\r\n                <div className={`header-block${mobileActive ? ' active' : ''}`}/>\r\n                <div className={`bars${mobileActive ? ' is-active' : ''}`} onClick={toggleMenu}>\r\n                    <span/>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    )\r\n}","import React from 'react'\r\nimport {Header} from '../components/Header'\r\n\r\nexport const WrapperPage: React.FC = ({children}) => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Header/>\r\n            <div className=\"content-container\">\r\n                {children}\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}","import React from 'react'\r\nimport '../styles/app.css'\r\nimport {Helmet} from \"react-helmet-async\";\r\n\r\nexport const HomePage: React.FC = () => {\r\n\r\n    const getHelloMessage = () => {\r\n        const hours = new Date().getHours()\r\n        if (hours >= 23 || hours <= 6) return \"Доброй ночи!\"\r\n        if (hours > 6 && hours < 12) return \"Доброго утра!\"\r\n        if (hours >= 12 && hours < 18) return \"Доброго дня!\"\r\n        if (hours >= 18 && hours < 23) return \"Доброго вечера!\"\r\n    }\r\n\r\n    const quotes = ['Время — это капитал работника умственного труда',\r\n        'Время — великий учитель',\r\n        'Поле моей деятельности - это время',\r\n        'Время — движущееся подобие вечности',\r\n        'Единственная причина для существования времени — чтобы все не случилось одновременно'\r\n    ]\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>Главная</title>\r\n            </Helmet>\r\n            <h1 className=\"hello-header\">{getHelloMessage()}</h1>\r\n            <h4>{quotes[Math.round(Math.random() * 4)]}</h4>\r\n        </>\r\n\r\n    )\r\n}\r\n","import React, {useCallback, useEffect, useState} from 'react'\r\nimport {Helmet} from 'react-helmet-async'\r\n\r\nexport const TimePage: React.FC = () => {\r\n\r\n    const getCurrentTime = useCallback((): string => {\r\n        const date = new Date()\r\n        const h = parseTimePart(date.getHours())\r\n        const m = parseTimePart(date.getMinutes())\r\n        const s = parseTimePart(date.getSeconds())\r\n        return `${h}:${m}:${s}`\r\n    }, [])\r\n\r\n    const [time, setTime] = useState<string>(getCurrentTime())\r\n\r\n    function parseTimePart(part: number) {\r\n        return part.toString().length > 1 ? part.toString() : `0${part}`\r\n    }\r\n\r\n    useEffect(() => {\r\n        const id = setInterval(() => {\r\n            setTime(getCurrentTime())\r\n        }, 1000);\r\n        return () => clearInterval(id)\r\n    }, [getCurrentTime])\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>Время</title>\r\n            </Helmet>\r\n            <h1 className=\"time-header\">\r\n                <span className=\"header-border\"/>\r\n                {time}\r\n            </h1>\r\n        </>\r\n    )\r\n}\r\n\r\n","import {useCallback, useState} from \"react\"\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState<string | undefined>(undefined)\r\n    const [status, setStatus] = useState<number | undefined>(undefined)\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\r\n        setLoading(true)\r\n        try {\r\n            if (body) {\r\n                body = JSON.stringify(body)\r\n                headers['Content-Type'] = 'application/json'\r\n            }\r\n            const response = await fetch(url, {method, body, headers})\r\n            setStatus(response.status)\r\n            if (!response.ok) throw new Error('Произошла ошибка при загрузке данных')\r\n            let data\r\n            switch (response.headers.get('content-type')) {\r\n                case 'image/jpeg':\r\n                    data = URL.createObjectURL(await response.blob())\r\n                    break\r\n                default:\r\n                    data = await response.json()\r\n            }\r\n            return data\r\n        } catch (e) {\r\n            setError(e.message)\r\n            console.log(error)\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n    }, [error])\r\n\r\n    const clearError = useCallback(() => setError(undefined), [setError])\r\n    return {loading, status, request, error, clearError}\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport {CSSTransition} from 'react-transition-group'\r\n\r\ninterface IAlertParams {\r\n    children?: React.ReactNode,\r\n    show: boolean,\r\n    header?: string,\r\n    hideHandler: () => void\r\n}\r\n/***\r\n * Component renders modal window with children react node\r\n * @param children -\r\n * @param hideHandler -\r\n * @param header - possibly window header\r\n * @param show - **/\r\nexport const Alert = ({children, show, hideHandler, header}: IAlertParams) => {\r\n    // console.log('Alert render')\r\n    return ReactDOM.createPortal(\r\n        <CSSTransition in={show}\r\n                       timeout={500}\r\n                       classNames=\"blur-window\"\r\n                       unmountOnExit>\r\n            <div className=\"blur-window\">\r\n                <div className=\"message_block\">\r\n                    <div className={`message_block_header${!header ? ' cont-left' : ''}`}>\r\n                        {header ? <p>{header}</p> : null}\r\n                        <div className=\"bars is-active\"\r\n                             onClick={hideHandler}>\r\n                            <span/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"message_content\">\r\n                        {children}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </CSSTransition>,\r\n        document.getElementById('modal')!\r\n    )\r\n}","import React, {useCallback, useContext, useEffect, useState} from 'react'\r\nimport {useYandexGeoAPI} from '../hooks/yandex.geo.hook'\r\nimport {useHttp} from '../hooks/http.hook'\r\nimport {IWeatherContext, ICoords} from './weather.types'\r\nimport {Alert} from '../components/Alert'\r\n\r\nexport const HPA_TO_MMHG = 0.750064\r\n\r\nconst WeatherContext = React.createContext({} as IWeatherContext)\r\n\r\nexport const windDirection = (degrees: number) => {\r\n    if (degrees >= 22 && degrees < 67) return 'северо-восточный'\r\n    if (degrees >= 67 && degrees < 112) return 'восточный'\r\n    if (degrees >= 112 && degrees < 157) return 'юго-восточный'\r\n    if (degrees >= 157 && degrees < 202) return 'южный'\r\n    if (degrees >= 202 && degrees < 247) return 'юго-западный'\r\n    if (degrees >= 247 && degrees < 292) return 'западный'\r\n    if (degrees >= 292 && degrees < 337) return 'северо-западный'\r\n    if (degrees >= 337 || degrees < 22) return 'северный'\r\n    return ''\r\n}\r\n\r\nexport const useWeather = () => {\r\n    return useContext(WeatherContext);\r\n}\r\n\r\nexport const WeatherProvider: React.FC = ({children}) => {\r\n    const WEATHER_API_KEY = '5de420bd1f4b9b2f9f8db3c42afa728e'\r\n\r\n    function toDate(timestamp: number, withDay?: boolean, withTime?: boolean): string {\r\n        const shortMonths = ['Января', 'Февраля', 'Марта', 'Апреля', 'Мая', 'Июня', 'Июля', 'Августа', 'Сентября', 'Октября', 'Ноября', 'Декабря']\r\n        const shortDays: Array<string> = ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота']\r\n        const date = new Date(timestamp)\r\n        if (withDay) {\r\n            return `${shortDays[date.getDay()]}, ${date.getDate()} ${shortMonths[date.getMonth()]}`\r\n        }\r\n        if (withTime) {\r\n            return `${shortMonths[date.getMonth()]}\r\n                 ${date.getDate()} \r\n                 ${date.getHours()}\r\n                 :${date.getMinutes() === 0 ? '00' : date.getMinutes()}`\r\n        }\r\n        return `${shortMonths[date.getMonth()]} ${date.getDate()}`\r\n    }\r\n\r\n    const [forecast, setForecast] = useState(undefined)\r\n    const {active, setActive, members, resetMembers, getMembersByCityName, getMemberByCoords, locationLoad} = useYandexGeoAPI()\r\n    const {request, error, loading} = useHttp()\r\n    const [errMsg, setErrMsg] = useState<string | undefined>(undefined)\r\n    const [showErr, setShowErr] = useState<boolean>(false)\r\n\r\n    const fetchForecast = useCallback(async (coords: ICoords) => {\r\n        const url = `https://api.openweathermap.org/data/2.5/onecall?` +\r\n            `lat=${coords.latitude}` +\r\n            `&lon=${coords.longitude}` +\r\n            `&exclude=hourly,minutely&lang=ru&units=metric&appid=${WEATHER_API_KEY}`\r\n        const data = await request(url)\r\n        setForecast(data)\r\n    }, [request])\r\n\r\n    const getForecastByCityCoords = useCallback(() => {\r\n        if (active === -1) return\r\n        if (members.length === 0) return setErrMsg('Местоположение не найдено')\r\n        fetchForecast({\r\n            longitude: members[active].coords.longitude,\r\n            latitude: members[active].coords.latitude\r\n        })\r\n    }, [fetchForecast, members, active])\r\n\r\n    const getForecastByGeolocation = useCallback(() => {\r\n        if (navigator.geolocation) { //check if geolocation is available\r\n            navigator.geolocation.getCurrentPosition(function (position) {\r\n                const latitude = position.coords.latitude.toFixed(3)\r\n                const longitude = position.coords.longitude.toFixed(3)\r\n                getMemberByCoords(longitude, latitude)\r\n                fetchForecast({\r\n                    latitude,\r\n                    longitude\r\n                })\r\n            }, function () {\r\n                setErrMsg('Не удалось получить доступ к вашему местоположению')\r\n            })\r\n        }\r\n    }, [fetchForecast, getMemberByCoords, setErrMsg])\r\n\r\n    //получение погоды при загрузке страницы по местоположению\r\n    useEffect(() => {\r\n        if (members.length === 0 && active === -1)\r\n            getForecastByGeolocation()\r\n    }, [getForecastByGeolocation])\r\n\r\n    //получение погоды при выборе пользователем местоположения\r\n    useEffect(() => {\r\n        getForecastByCityCoords()\r\n    }, [getForecastByCityCoords, active, members])\r\n\r\n    useEffect(() => {\r\n        setErrMsg(error)\r\n    }, [error, setErrMsg])\r\n\r\n    useEffect(() => {\r\n        setShowErr(!!errMsg)\r\n    }, [errMsg])\r\n\r\n    const setActiveGeolocation = useCallback((e: React.MouseEvent) => {\r\n        setActive(parseInt(e.currentTarget.id))\r\n    }, [setActive])\r\n\r\n    const resetCurrentWeather = useCallback(() => {\r\n        setActive(-1)\r\n        resetMembers()\r\n    }, [setActive, resetMembers])\r\n\r\n    const closeErrAlertHandler = () => {\r\n        setShowErr(false)\r\n    }\r\n\r\n    const closeChooseAlertHandler = () => {\r\n        setActive(0)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Alert show={(members.length > 1 && active === -1)}\r\n                   header=\"Выберите населённый пункт\"\r\n                   hideHandler={closeChooseAlertHandler}>\r\n                {\r\n                    members.length > 1 ?\r\n                        <ul className=\"alert-members-list\">\r\n                            {members.map((member, idx) =>\r\n                                <li key={idx}\r\n                                    id={idx.toString()}\r\n                                    onClick={setActiveGeolocation}>\r\n                                    {member.text}\r\n                                </li>\r\n                            )}\r\n                        </ul> : null\r\n                }\r\n            </Alert>\r\n            <Alert show={showErr}\r\n                   hideHandler={closeErrAlertHandler}>\r\n                <span>{errMsg}</span>\r\n            </Alert>\r\n            <WeatherContext.Provider\r\n                value={{\r\n                    forecast,\r\n                    members,\r\n                    active,\r\n                    resetCurrentWeather,\r\n                    getMembersByCityName,\r\n                    toDate,\r\n                    isLoading: locationLoad || loading\r\n                }}>\r\n                {children}\r\n            </WeatherContext.Provider>\r\n        </>\r\n    )\r\n}\r\n","import {useState, useCallback} from 'react'\r\nimport {ICoords, IMember, IMemberInfo} from '../weather-slider/weather.types'\r\nimport {useHttp} from './http.hook'\r\n\r\nexport const useYandexGeoAPI = () => {\r\n    const YANDEX_API_KEY = '6261b031-9bb5-466a-858b-f3ee070251bf'\r\n    const [members, setMembers] = useState<Array<IMemberInfo>>([])\r\n    const [active, setActive] = useState(-1)\r\n    const {request, loading} = useHttp()\r\n\r\n    const getMemberInfoFromData = useCallback((member: IMember, idx?: number): IMemberInfo => {\r\n        return {\r\n            name: member.GeoObject.name,\r\n            description: member.GeoObject.description,\r\n            text: member.GeoObject.metaDataProperty.GeocoderMetaData.text,\r\n            coords: getFeatureMemberCoords(member)\r\n        }\r\n    }, [])\r\n\r\n    function getFeatureMemberCoords(member: any): ICoords {\r\n        const coords: string[] = member.GeoObject.Point.pos.split(' ')\r\n        coords.map(coord => parseFloat(coord).toFixed(3))\r\n        return {\r\n            latitude: coords[1],\r\n            longitude: coords[0]\r\n        }\r\n    }\r\n\r\n    const getMemberByCoords = useCallback(async (long: string, lat: string) => {\r\n        const url = `https://geocode-maps.yandex.ru/1.x?` +\r\n            `apikey=${YANDEX_API_KEY}` +\r\n            `&sco=longlat` +\r\n            `&kind=locality` +\r\n            `&format=json` +\r\n            `&geocode=${long},${lat}`\r\n        const data = await request(url)\r\n        if (data) {\r\n            const members: Array<IMember> = data.response.GeoObjectCollection.featureMember\r\n            const info = [members.map(getMemberInfoFromData)[0]]\r\n            setMembers(info)\r\n            if (info.length === 1) {\r\n                setActive(0)\r\n            }\r\n        } else {\r\n            setMembers([])\r\n        }\r\n    }, [getMemberInfoFromData, request])\r\n\r\n    const getMembersByCityName = useCallback(async (city: string) => {\r\n        const url = `https://geocode-maps.yandex.ru/1.x?` +\r\n            `apikey=${YANDEX_API_KEY}` +\r\n            `&format=json` +\r\n            `&geocode=${city}`\r\n        const data = await request(url)\r\n        if (data) {\r\n            const members: Array<IMember> = data.response.GeoObjectCollection.featureMember\r\n            setMembers(members.map(getMemberInfoFromData))\r\n            if (members.length === 1) {\r\n                setActive(0)\r\n            }\r\n        } else {\r\n            setMembers([])\r\n        }\r\n    }, [getMemberInfoFromData, request])\r\n\r\n    const resetMembers = useCallback(() => {\r\n        setMembers([])\r\n    }, [])\r\n\r\n    return {members, resetMembers, active, setActive, getMembersByCityName, getMemberByCoords, locationLoad: loading}\r\n}","export default __webpack_public_path__ + \"static/media/weather-icons-sprite.59631b9e.svg\";","import {IWeatherCondition} from './weather.types'\r\n\r\ninterface IInfo {\r\n    conditions: Array<{ icon: string, id: Array<number> }>\r\n}\r\n\r\nconst info: IInfo = JSON.parse('{\"conditions\":[{\"icon\":\"thunderstorm-rain\",\"id\":[200,201,202]},{\"icon\":\"light-thunderstorm\",\"id\":[210]},{\"icon\":\"thunderstorm\",\"id\":[211,212,221,230,231,232]},{\"icon\":\"drizzle\",\"id\":[300,301,302,310,311,312,313,314,321]},{\"icon\":\"light-rain\",\"id\":[500,501,502,503,504]},{\"icon\":\"hail\",\"id\":[511]},{\"icon\":\"rain\",\"id\":[520,521,522,531]},{\"icon\":\"light-snow\",\"id\":[600,601]},{\"icon\":\"snow\",\"id\":[602,611,612,613]},{\"icon\":\"snowy\",\"id\":[615,616,620,621,622]},{\"icon\":\"haze\",\"id\":[701,711,721,731]},{\"icon\":\"fog\",\"id\":[741,751,761,762,771]},{\"icon\":\"tornado\",\"id\":[781]},{\"icon\":\"clear\",\"id\":[800]},{\"icon\":\"few-clouds\",\"id\":[801]},{\"icon\":\"scattered-clouds\",\"id\":[802]},{\"icon\":\"overcast-clouds\",\"id\":[803,804]}]}')\r\n\r\nexport const getIconByID = (current: IWeatherCondition, offset: number): string => {\r\n    let name = ''\r\n    for (const {icon, id} of info.conditions) {\r\n        for (const idx of id) {\r\n            if (idx === current.weather[0].id) name = icon\r\n        }\r\n    }\r\n    if (name === 'few-clouds' || name === 'clear') {\r\n        const now = new Date()\r\n        const sunrise = new Date(current.sunrise * 1000 - (offset * 60 * 1000))\r\n        const sunset = new Date(current.sunset * 1000 - (offset * 60 * 1000))\r\n        if (now.getHours() > sunrise.getHours() && now.getHours() <= sunset.getHours()) return `${name}-d`\r\n        return `${name}-n`\r\n    }\r\n    return name\r\n}","import React from 'react'\r\nimport {useWeather, windDirection} from './WeatherContext'\r\nimport IconsSVG from '../weather-slider/styles/weather-icons-sprite.svg'\r\nimport {IWeatherCondition} from './weather.types'\r\nimport {Icon} from '../components/svg-icons/Icon'\r\nimport {getIconByID} from './weather-conditions'\r\n\r\ntype SliderItemParams = {\r\n    item: IWeatherCondition,\r\n    style: {\r\n        minWidth: string\r\n    }\r\n}\r\nexport const SliderCard: React.FC<SliderItemParams> = ({item, style}) => {\r\n\r\n    const {toDate, forecast} = useWeather()\r\n\r\n    if (!(typeof item.temp === 'object') || !forecast?.timezone_offset) return null\r\n\r\n    return (\r\n        <div className=\"slider-card\" style={style}>\r\n            <h5>{toDate(item.dt * 1000, true)}</h5>\r\n            <span className=\"description\">{item.weather[0].description}</span>\r\n            <Icon name={getIconByID(item, forecast.timezone_offset)} file={IconsSVG} className=\"card-icon\"/>\r\n            <h5 className=\"day-temp\">{`Днём  ${Math.round(item.temp.day)}`}&deg;C</h5>\r\n            <h6 className=\"night-temp\">{`Ночью  ${Math.round(item.temp.night)}`}&deg;C</h6>\r\n            <p>Ветер: {`${windDirection(item.wind_deg)} ${item.wind_speed}`} м/c</p>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport const Loader = () => {\r\n    return (\r\n        <div className=\"svg-loader\">\r\n            <svg className=\"svg-container\" viewBox=\"0 0 100 100\">\r\n                <circle className=\"loader-svg bg\" cx=\"50\" cy=\"50\" r=\"45\"></circle>\r\n                <circle className=\"loader-svg animate\" cx=\"50\" cy=\"50\" r=\"45\"></circle>\r\n            </svg>\r\n        </div>\r\n    );\r\n}","import React, {useEffect, useMemo, useRef, useState} from 'react'\r\nimport {useWeather} from '../weather-slider/WeatherContext'\r\nimport {CSSTransition, SwitchTransition} from 'react-transition-group'\r\n\r\nconst getCurrentLocationTimeString = (timezone: string) => {\r\n    return new Date().toLocaleTimeString('ru', {\r\n        timeZone: timezone,\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit'\r\n    })\r\n}\r\n\r\nexport const CurrentLocationBlock: React.FC = () => {\r\n\r\n    const {getMembersByCityName, active, resetCurrentWeather, members, forecast} = useWeather()\r\n    const [currentLocationTime, setTime] = useState<string>()\r\n    const input = useRef<HTMLInputElement>(null)\r\n    const findWeatherForecast = (e: React.MouseEvent) => {\r\n        e.preventDefault()\r\n        if (input.current && input.current.value.trim().length !== 0) {\r\n            getMembersByCityName(input.current.value.trim())\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (forecast) setTime(getCurrentLocationTimeString(forecast.timezone));\r\n        const timer = setInterval(() => {\r\n            if (forecast) setTime(getCurrentLocationTimeString(forecast.timezone));\r\n        }, 1000)\r\n        return () => {\r\n            clearInterval(timer)\r\n        }\r\n    }, [forecast])\r\n\r\n    const resetWeather = (e: React.MouseEvent) => {\r\n        e.preventDefault()\r\n        resetCurrentWeather()\r\n    }\r\n\r\n    const items = useMemo(() => {\r\n        if (active === -1) return []\r\n        return members[active].text.split(',')\r\n    }, [members, active])\r\n\r\n    return (\r\n        <SwitchTransition>\r\n            <CSSTransition key={active}\r\n                           addEndListener={(node, done) => node.addEventListener(\"transitionend\", done, false)}\r\n                           classNames=\"form-animation\">\r\n                <form className=\"location_form\">\r\n                    {active === -1 ?\r\n                        <>\r\n                            <div className=\"location_form__group\">\r\n                                <input type=\"input\"\r\n                                       ref={input}\r\n                                       className=\"location_form__input\"\r\n                                       placeholder=\"Введите город\"\r\n                                       autoComplete=\"off\"\r\n                                       id=\"country\" required/>\r\n                                <label htmlFor=\"country\"\r\n                                       className=\"location_form__label\">\r\n                                    Введите город\r\n                                </label>\r\n                            </div>\r\n                        </> :\r\n                        <div className=\"current-location-block\">\r\n                            {items.map((item, idx) => {\r\n                                if (!(items.length === 3) && idx === 2) return null\r\n                                return <p className={idx === items.length - 1 ? 'city' : ''}\r\n                                          key={idx}>{item}{idx !== items.length - 1 ? ',' : ''}</p>\r\n                            })}\r\n                            <div className=\"coords\">\r\n                                <span>{members[active].coords.latitude}</span>\r\n                                <span>{members[active].coords.longitude}</span>\r\n                            </div>\r\n                            <div className=\"time\">\r\n                                <span>{currentLocationTime}</span>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    <button className=\"btn\"\r\n                            onClick={active === -1 ? findWeatherForecast : resetWeather}>\r\n                        {active === -1 ? 'Поиск' : 'Изменить'}\r\n                    </button>\r\n                </form>\r\n            </CSSTransition>\r\n        </SwitchTransition>\r\n    )\r\n}","import React, {useState} from 'react'\r\nimport {useWeather, HPA_TO_MMHG, windDirection} from '../weather-slider/WeatherContext'\r\nimport IconsSVG from '../weather-slider/styles/weather-icons-sprite.svg'\r\nimport {Icon} from './svg-icons/Icon'\r\nimport {CSSTransition, SwitchTransition} from 'react-transition-group'\r\nimport {getIconByID} from '../weather-slider/weather-conditions'\r\n\r\nexport const CurrentWeatherBlock = () => {\r\n\r\n    enum InfoState {\r\n        basic,\r\n        external\r\n    }\r\n\r\n    const {toDate, forecast, isLoading} = useWeather()\r\n    const [basic, setBasic] = useState(InfoState.basic)\r\n\r\n    const setBasicHandler = (e: React.MouseEvent) => {\r\n        e.preventDefault()\r\n        setBasic(basic => basic === InfoState.basic ? InfoState.external : InfoState.basic)\r\n    }\r\n\r\n    const getTimeByTimeZone = (timestamp: number, timezone: string) => {\r\n        return new Date(timestamp * 1000).toLocaleString('ru-RU', {\r\n            timeZone: timezone,\r\n            hour: \"2-digit\",\r\n            minute: \"2-digit\"\r\n        })\r\n    }\r\n\r\n    if (!forecast) return null\r\n\r\n    const current = forecast.current\r\n    const temp = current.temp\r\n    const feels = current.feels_like\r\n\r\n    return (\r\n        <div className=\"current-weather-card\" onClick={setBasicHandler}>\r\n            <h3>{toDate(forecast.current.dt * 1000, true)}</h3>\r\n            <h5>{current.weather[0].description}</h5>\r\n            <Icon name={getIconByID(current, forecast.timezone_offset)} className=\"main-icon\" file={IconsSVG}/>\r\n            <SwitchTransition>\r\n                <CSSTransition key={basic}\r\n                               addEndListener={(node, done) => node.addEventListener(\"transitionend\", done, false)}\r\n                               classNames=\"form-animation\">\r\n                    {basic === InfoState.basic ?\r\n                        <div className=\"card-content\">\r\n                            <div className=\"card-content-block\">\r\n                                <Icon name=\"celsius\" className=\"card-icon\" file={IconsSVG}/>\r\n                                <div className=\"temp-wrapper\">\r\n                                    <p>За окном {typeof temp === 'number' ? Math.round(temp) : ''}&deg; C</p>\r\n                                    <p>Ощущается как {typeof feels === 'number' ? Math.round(feels) : ''}&deg; C</p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"card-content-block\">\r\n                                <Icon name=\"pressure\" className=\"card-icon pressure\" file={IconsSVG}/>\r\n                                <p>Давление: {Math.round(current.pressure * HPA_TO_MMHG)} мм. рт. ст.</p>\r\n                            </div>\r\n                            <div className=\"card-content-block\">\r\n                                <Icon name=\"wind\" className=\"card-icon\" file={IconsSVG}/>\r\n                                <p>Ветер: {`${windDirection(current.wind_deg)} ${current.wind_speed}`} м/c</p>\r\n                            </div>\r\n                            <span>Нажмите для просмотра подробностей</span>\r\n                        </div>\r\n                        :\r\n                        <div className=\"card-content\">\r\n                            <div className=\"card-content-block\">\r\n                                <Icon name=\"sunrise\" className=\"card-icon\" file={IconsSVG}/>\r\n                                <p>Восход в {getTimeByTimeZone(current.sunrise, forecast.timezone)}</p>\r\n                            </div>\r\n                            <div className=\"card-content-block\">\r\n                                <Icon name=\"sunset\" className=\"card-icon\" file={IconsSVG}/>\r\n                                <p>Закат в {getTimeByTimeZone(current.sunset, forecast.timezone)}</p>\r\n                            </div>\r\n                            <div className=\"card-content-block\">\r\n                                <Icon name=\"humidity\" className=\"card-icon humidity\" file={IconsSVG}/>\r\n                                <p>Влажность воздуха {current.humidity}%</p>\r\n                            </div>\r\n                            <div className=\"card-content-block\">\r\n                                <Icon name=\"uv\" className=\"card-icon\" file={IconsSVG}/>\r\n                                <p>УФ-индекс: {current.uvi}</p>\r\n                            </div>\r\n                            <span>Нажмите для возврата</span>\r\n                        </div>\r\n                    }\r\n                </CSSTransition>\r\n            </SwitchTransition>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport {Helmet} from 'react-helmet-async'\r\nimport {WeatherProvider} from '../weather-slider/WeatherContext'\r\nimport {WeatherSlider} from '../weather-slider/WeatherSlider'\r\nimport {CurrentLocationBlock} from '../components/CurrentLocationBlock'\r\nimport {CurrentWeatherBlock} from '../components/CurrentWeatherBlock'\r\n\r\nexport const WeatherPage: React.FC = () => {\r\n\r\n    const sliderBreakPoints = [\r\n        {point: 360, slidesToShow: 1},\r\n        {point: 576, slidesToShow: 2},\r\n        {point: 800, slidesToShow: 3},\r\n        {point: 1300, slidesToShow: 4},\r\n        {point: 1500, slidesToShow: 5},\r\n    ]\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>Погода</title>\r\n            </Helmet>\r\n            <WeatherProvider>\r\n                <div className=\"weather-container\">\r\n                    <div className=\"weather-container-row\">\r\n                        <CurrentWeatherBlock/>\r\n                        <CurrentLocationBlock/>\r\n                    </div>\r\n                    <div className=\"weather-slider-panel\">\r\n                        <WeatherSlider breakpoints={sliderBreakPoints}/>\r\n                    </div>\r\n                </div>\r\n            </WeatherProvider>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport './styles/app.css'\r\nimport {BrowserRouter as Router, Redirect, Route, Switch} from 'react-router-dom'\r\nimport {HelmetProvider} from 'react-helmet-async'\r\nimport {WrapperPage} from './pages/WrapperPage'\r\nimport {HomePage} from './pages/HomePage'\r\nimport {TimePage} from './pages/TimePage'\r\nimport {WeatherPage} from './pages/WeatherPage'\r\n\r\nconst App: React.FC = () => {\r\n    console.info(process.env.PUBLIC_URL)\r\n    return (\r\n        <HelmetProvider>\r\n            <Router basename={`${process.env.PUBLIC_URL}`}>\r\n                <Switch>\r\n                    <WrapperPage>\r\n                        <Route exact path=\"/\" component={HomePage}/>\r\n                        <Route exact path=\"/time\" component={TimePage}/>\r\n                        <Route exact path=\"/weather\" component={WeatherPage}/>\r\n                        <Redirect to=\"/weather\"/>\r\n                    </WrapperPage>\r\n                </Switch>\r\n            </Router>\r\n        </HelmetProvider>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n    document.getElementById('container')\r\n);\r\n\r\n"],"sourceRoot":""}